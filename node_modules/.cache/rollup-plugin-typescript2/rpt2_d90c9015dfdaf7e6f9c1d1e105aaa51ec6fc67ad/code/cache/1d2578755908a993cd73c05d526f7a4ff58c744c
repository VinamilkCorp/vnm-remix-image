{"code":"import fs from \"fs\";\nimport path from \"path\";\nimport isSvg from \"is-svg\";\nimport mimeFromBuffer from \"mime-tree\";\nimport { RemixImageError, UnsupportedImageError } from \"../../types/error\";\nimport { MimeType } from \"../../types/file\";\nexport const fsResolver = async (asset, _url, _options, basePath) => {\n    const filePath = path.resolve(basePath, asset.slice(1));\n    const buffer = fs.readFileSync(filePath);\n    if (!buffer || buffer.byteLength < 2) {\n        throw new RemixImageError(\"Invalid image retrieved from resolver!\");\n    }\n    let contentType = null;\n    try {\n        contentType = mimeFromBuffer(buffer);\n    }\n    catch (error) {\n        if (isSvg(new TextDecoder().decode(buffer))) {\n            contentType = MimeType.SVG;\n        }\n        else {\n            throw new UnsupportedImageError(\"Buffer is not a supported image type!\");\n        }\n    }\n    return {\n        buffer: new Uint8Array(buffer),\n        contentType,\n    };\n};\n","references":["/Users/hnanh/Workspaces/remix-image/node_modules/is-svg/index.d.ts","/Users/hnanh/Workspaces/remix-image/node_modules/mime-tree/build/index.d.ts","/Users/hnanh/Workspaces/remix-image/src/types/error.ts","/Users/hnanh/Workspaces/remix-image/src/types/file.ts","/Users/hnanh/Workspaces/remix-image/src/types/resolver.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/server/resolvers/fsResolver.d.ts","writeByteOrderMark":false,"text":"import type { Resolver } from \"../../types/resolver\";\nexport declare const fsResolver: Resolver;\n"}}
