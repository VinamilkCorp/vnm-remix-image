{"code":"export var CacheStatus;\n(function (CacheStatus) {\n    /**\n     * The cache contains the key and it has not yet expired\n     */\n    CacheStatus[\"HIT\"] = \"hit\";\n    /**\n     * The cache contains the key but it has expired\n     */\n    CacheStatus[\"STALE\"] = \"stale\";\n    /**\n     * The cache does not contain the key\n     */\n    CacheStatus[\"MISS\"] = \"miss\";\n})(CacheStatus || (CacheStatus = {}));\nexport class Cache {\n}\n","references":[],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/types/cache.d.ts","writeByteOrderMark":false,"text":"export interface CacheConfig {\n    /**\n     * Time To Live: how long a key should remain in the cache\n     */\n    ttl: number;\n    /**\n     * Time Before Deletion: how long a key should remain in the cache after expired (ttl)\n     */\n    tbd: number;\n}\nexport declare enum CacheStatus {\n    /**\n     * The cache contains the key and it has not yet expired\n     */\n    HIT = \"hit\",\n    /**\n     * The cache contains the key but it has expired\n     */\n    STALE = \"stale\",\n    /**\n     * The cache does not contain the key\n     */\n    MISS = \"miss\"\n}\nexport declare abstract class Cache {\n    abstract config: CacheConfig;\n    abstract has(key: string): Promise<boolean>;\n    abstract status(key: string): Promise<CacheStatus>;\n    abstract get(key: string): Promise<Uint8Array | null>;\n    abstract set(key: string, resultImg: Uint8Array): Promise<void>;\n    abstract clear(): Promise<void>;\n}\n"}}
