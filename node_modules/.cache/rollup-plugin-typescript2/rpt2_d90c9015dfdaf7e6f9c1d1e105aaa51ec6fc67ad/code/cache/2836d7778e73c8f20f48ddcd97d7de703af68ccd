{"code":"import LRU from \"lru-cache\";\nimport { Cache, CacheStatus } from \"../../types/cache\";\nimport { mB } from \"../../utils/cache\";\nexport class MemoryCache extends Cache {\n    config;\n    cache;\n    constructor(config = {}) {\n        super();\n        this.config = {\n            maxSize: config?.maxSize ?? mB(50),\n            ttl: config?.ttl ?? 24 * 60 * 60,\n            tbd: config?.tbd ?? 365 * 24 * 60 * 60,\n        };\n        this.cache = new LRU({\n            ttl: this.config.ttl,\n            allowStale: true,\n            updateAgeOnGet: true,\n            maxSize: this.config.maxSize,\n            sizeCalculation: (value) => value.byteLength,\n        });\n    }\n    async status(key) {\n        return this.cache.has(key) ? CacheStatus.HIT : CacheStatus.MISS;\n    }\n    async has(key) {\n        return this.cache.has(key);\n    }\n    async get(key) {\n        return this.cache.get(key) ?? null;\n    }\n    async set(key, resultImg) {\n        this.cache.set(key, resultImg, {\n            size: resultImg.byteLength,\n        });\n    }\n    async clear() {\n        this.cache.clear();\n    }\n}\n","references":["/Users/hnanh/Workspaces/remix-image/node_modules/lru-cache/index.d.ts","/Users/hnanh/Workspaces/remix-image/src/types/cache.ts","/Users/hnanh/Workspaces/remix-image/src/utils/cache.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/server/caches/memoryCache.d.ts","writeByteOrderMark":false,"text":"import LRU from \"lru-cache\";\nimport { Cache, CacheConfig, CacheStatus } from \"../../types/cache\";\nexport interface MemoryCacheConfig extends CacheConfig {\n    /**\n     * Max Size: the max size of the cache in bytes\n     */\n    maxSize: number;\n}\nexport declare class MemoryCache extends Cache {\n    config: MemoryCacheConfig;\n    cache: LRU<string, Uint8Array>;\n    constructor(config?: Partial<MemoryCacheConfig> | null | undefined);\n    status(key: string): Promise<CacheStatus>;\n    has(key: string): Promise<boolean>;\n    get(key: string): Promise<Uint8Array | null>;\n    set(key: string, resultImg: Uint8Array): Promise<void>;\n    clear(): Promise<void>;\n}\n"}}
