{"code":"export {};\n","references":["/Users/hnanh/Workspaces/remix-image/src/types/file.ts","/Users/hnanh/Workspaces/remix-image/src/types/image.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/types/transformer.d.ts","writeByteOrderMark":false,"text":"import { MimeType } from \"./file\";\nimport { Color } from \"./image\";\nexport type ImageFit = \n/** Preserving aspect ratio, contain image within both provided dimensions using a border where necessary. */\n\"contain\"\n/** Preserving aspect ratio, ensure the image covers both provided dimensions by cropping it to fit. */\n | \"cover\"\n/** Ignore the aspect ratio of the input and stretch to both provided dimensions. */\n | \"fill\"\n/** Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified. */\n | \"inside\"\n/** Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. */\n | \"outside\";\nexport type ImagePositionHorizontal = \"left\" | \"center\" | \"right\";\nexport type ImagePositionVertical = \"top\" | \"center\" | \"bottom\";\nexport type ImagePosition = ImagePositionHorizontal | ImagePositionVertical | `${ImagePositionHorizontal} ${ImagePositionVertical}`;\nexport type FlipDirection = \"horizontal\" | \"vertical\" | \"both\";\nexport interface CropOptions {\n    /** The x position of the upper left pixel. */\n    x: number;\n    /** The y position of the upper left pixel. */\n    y: number;\n    /** The number of pixels wide to crop the image. */\n    width: number;\n    /** The number of pixels high to crop the image. */\n    height: number;\n}\nexport interface TransformOptions {\n    /** Width of resulting image. (optional, default null) */\n    width?: number | null;\n    /** Height of resulting image. If width is present, this takes priority. (optional, default null) */\n    height?: number | null;\n    /** The content type of the resulting image. (optional, default source type) */\n    contentType?: MimeType;\n    /** How the image should be resized to fit both provided dimensions. (optional, default 'contain') */\n    fit?: ImageFit;\n    /** Position to use when fit is cover or contain. (optional, default 'center') */\n    position?: ImagePosition | string | number;\n    /** Background color of resulting image. (optional, default [0x00, 0x00, 0x00, 0x00]) */\n    background?: Color;\n    /** Quality, integer 1-100. (optional, default 80) */\n    quality?: number;\n    /** zlib compression level, 0-9. (optional, default 9) */\n    compressionLevel?: number;\n    /** Number of animation iterations, use 0 for infinite animation. (optional, default 0) */\n    loop?: number;\n    /** Delay between animation frames (in milliseconds). (optional, default 100) */\n    delay?: number;\n    /** The number of pixels to blur the image by. (optional, default null) */\n    blurRadius?: number | null;\n    /** The number of degrees to rotate the image by. (optional, default null) */\n    rotate?: number | null;\n    /** The direction to mirror the image by. (optional, default null) */\n    flip?: FlipDirection | null;\n    /** The location to crop the source image before any other operations are applied. (optional, default null) */\n    crop?: CropOptions | null;\n}\nexport type SizelessOptions = Omit<TransformOptions, \"width\" | \"height\">;\nexport type Transformer = {\n    name: string;\n    supportedInputs: Set<MimeType>;\n    supportedOutputs: Set<MimeType>;\n    fallbackOutput: MimeType;\n    transform: (input: {\n        url: string;\n        data: Uint8Array;\n        contentType: MimeType;\n    }, output: Required<TransformOptions>) => Promise<Uint8Array>;\n};\n"}}
