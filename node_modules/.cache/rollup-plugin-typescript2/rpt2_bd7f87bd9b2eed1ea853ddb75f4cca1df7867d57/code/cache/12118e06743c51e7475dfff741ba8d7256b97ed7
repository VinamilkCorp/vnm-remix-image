{"code":"export function computePlaceholderSize(sizes = [], aspectRatio) {\n    let ratio = aspectRatio || 1;\n    let largestWidth = 0;\n    for (let i = 0; i < sizes.length; i += 1) {\n        const size = sizes[i].size || {};\n        if (size.width) {\n            if (size.width > largestWidth) {\n                largestWidth = size.width;\n            }\n            if (!aspectRatio && size.height) {\n                ratio = size.height / size.width;\n            }\n        }\n    }\n    return {\n        width: largestWidth,\n        height: Math.round(largestWidth * ratio),\n    };\n}\n// See https://stackoverflow.com/q/39777833/266535 for why we use this ref\n// handler instead of the img's onLoad attribute.\nexport function handleLoading(img, src, onLoadingComplete) {\n    img.style.animationDuration = \"0.125s\";\n    img.classList.remove(\"blur\");\n    if (!img || img[\"data-loaded-src\"] === src) {\n        return;\n    }\n    img[\"data-loaded-src\"] = src;\n    const p = \"decode\" in img ? img.decode() : Promise.resolve();\n    p.catch(() => { }).then(() => {\n        if (!img.parentNode) {\n            return;\n        }\n        img.style.animationDuration = \"0.125s\";\n        img.classList.remove(\"blur\");\n        if (onLoadingComplete) {\n            const { naturalWidth, naturalHeight } = img;\n            onLoadingComplete({ naturalWidth, naturalHeight });\n        }\n    });\n}\n","references":["/Users/hnanh/Workspaces/remix-image/src/types/index.ts","/Users/hnanh/Workspaces/remix-image/src/components/Image/types.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/components/Image/helpers.d.ts","writeByteOrderMark":false,"text":"import { ResponsiveSize } from \"../../types\";\nimport { OnLoadingComplete } from \"./types\";\nexport type ImgElementWithDataProp = HTMLImageElement & {\n    \"data-loaded-src\": string | undefined;\n};\nexport declare function computePlaceholderSize(sizes: ResponsiveSize[] | undefined, aspectRatio: number | null): {\n    width: number;\n    height: number;\n};\nexport declare function handleLoading(img: ImgElementWithDataProp, src: string, onLoadingComplete: OnLoadingComplete | null | undefined): void;\n"}}
