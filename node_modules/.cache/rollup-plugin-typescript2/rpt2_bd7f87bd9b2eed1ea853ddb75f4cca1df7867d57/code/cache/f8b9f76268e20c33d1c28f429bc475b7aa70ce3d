{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n// @ts-nocheck\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport { useResponsiveImage } from \"../../hooks\";\nimport { remixImageLoader } from \"../../loaders\";\nimport { computePlaceholderSize, handleLoading, } from \"./helpers\";\nexport const Image = React.memo(React.forwardRef(({ src, loaderUrl = \"/api/image\", loader = remixImageLoader, responsive = [], options = {}, dprVariants = 1, decoding = \"async\", loading = \"lazy\", unoptimized = false, placeholder = \"empty\", blurDataURL = !unoptimized && placeholder === \"blur\"\n    ? loader(src || \"\", loaderUrl, {\n        width: 15,\n        height: 15,\n        fit: options?.fit || \"cover\",\n        position: options?.position || \"center\",\n        contentType: options.contentType,\n    })\n    : null, placeholderAspectRatio = null, onLoadingComplete, className, style = {}, onLoad, ...imgProps }, ref) => {\n    const responsiveProps = useResponsiveImage({ src }, responsive, options, dprVariants, loaderUrl, loader);\n    const imageStyle = React.useMemo(() => {\n        if (unoptimized)\n            return style;\n        const placeholderSize = computePlaceholderSize(responsive, placeholderAspectRatio);\n        return {\n            minWidth: placeholderSize.width,\n            minHeight: placeholderSize.height,\n            backgroundSize: options?.fit || \"cover\",\n            backgroundPosition: options?.position || \"center\",\n            ...(blurDataURL && {\n                backgroundImage: `url(\"${blurDataURL}\")`,\n            }),\n            ...style,\n        };\n    }, [\n        unoptimized,\n        responsive,\n        placeholderAspectRatio,\n        style,\n        options?.fit,\n        options?.position,\n        blurDataURL,\n    ]);\n    return (_jsx(\"img\", { ref: React.useCallback((img) => {\n            if (img != null) {\n                if (!unoptimized) {\n                    if (placeholder === \"blur\") {\n                        img.classList.add(\"blur\");\n                    }\n                    if (img?.complete) {\n                        handleLoading(img, src, onLoadingComplete);\n                    }\n                }\n                if (ref) {\n                    if (typeof ref === \"function\") {\n                        ref(img);\n                    }\n                    else {\n                        ref.current = img;\n                    }\n                }\n            }\n        }, [unoptimized, ref, src, placeholder, onLoadingComplete]), decoding: decoding, loading: loading, style: imageStyle, className: clsx(!unoptimized && \"remix-image\", !unoptimized && placeholder === \"blur\" && \"blur-in\", className), ...imgProps, ...responsiveProps, onLoad: (event) => {\n            if (!unoptimized) {\n                const img = event.currentTarget;\n                console.log(img, src);\n                handleLoading(img, src, onLoadingComplete);\n            }\n            if (onLoad) {\n                onLoad(event);\n            }\n        } }));\n}));\nImage.displayName = \"Image\";\n","references":["/Users/hnanh/Workspaces/remix-image/node_modules/clsx/clsx.d.ts","/Users/hnanh/Workspaces/node_modules/@types/react/index.d.ts","/Users/hnanh/Workspaces/remix-image/src/hooks/index.ts","/Users/hnanh/Workspaces/remix-image/src/loaders/index.ts","/Users/hnanh/Workspaces/remix-image/src/components/Image/helpers.ts","/Users/hnanh/Workspaces/remix-image/src/components/Image/types.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/components/Image/Image.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\nimport { ImageProps } from \"./types\";\nexport declare const Image: React.NamedExoticComponent<ImageProps>;\n"}}
