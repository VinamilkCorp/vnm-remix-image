{"code":"import * as React from \"react\";\nimport { remixImageLoader } from \"../loaders\";\nconst sizeComparator = (resp1, resp2) => (resp1.maxWidth || Infinity) - (resp2.maxWidth || Infinity);\nconst sizeConverter = (resp) => resp.maxWidth\n    ? `(max-width: ${resp.maxWidth}px) ${resp.size.width}px`\n    : `${resp.size.width}px`;\nexport function useResponsiveImage(image, responsive, options = {}, dprVariants = [1], loaderUrl = \"/api/image\", loader = remixImageLoader) {\n    return React.useMemo(() => {\n        let largestSrc = image.src || \"\";\n        let largestWidth = 0;\n        const srcSet = [];\n        const multipliers = Array.from(new Set([\n            1,\n            ...(typeof dprVariants === \"number\" ? [dprVariants] : dprVariants),\n        ])).sort();\n        for (const multiplier of multipliers) {\n            for (const { size } of responsive) {\n                const srcSetUrl = loader(image.src || \"\", loaderUrl, {\n                    width: typeof size.width === \"number\"\n                        ? size.width * multiplier\n                        : size.width,\n                    height: typeof size.height === \"number\"\n                        ? size.height * multiplier\n                        : size.height,\n                    fit: \"cover\",\n                    position: \"center\",\n                    background: [0x00, 0x00, 0x00, 0x00],\n                    quality: 80,\n                    compressionLevel: 9,\n                    loop: 0,\n                    delay: 100,\n                    blurRadius: null,\n                    rotate: null,\n                    flip: null,\n                    crop: null,\n                    ...options,\n                });\n                srcSet.push(srcSetUrl + ` ${size.width * multiplier}w`);\n                if (multiplier === 1 && size.width > largestWidth) {\n                    largestWidth = size.width;\n                    largestSrc = srcSetUrl;\n                }\n            }\n        }\n        const sizes = [...responsive].sort(sizeComparator).map(sizeConverter);\n        if (responsive.length === 1 && responsive[0].maxWidth != null) {\n            sizes.push(`${responsive[0].size.width}px`);\n        }\n        return {\n            ...(srcSet.length > 0 && {\n                srcSet: srcSet.join(\", \"),\n                sizes: sizes.join(\", \"),\n            }),\n            // It's intended to keep `src` the last attribute because React updates\n            // attributes in order. If we keep `src` the first one, Safari will\n            // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n            // updated by React. That causes multiple unnecessary requests if `srcSet`\n            // and `sizes` are defined.\n            // This bug cannot be reproduced in Chrome or Firefox.\n            src: largestSrc,\n        };\n    }, [image.src, loaderUrl, loader, responsive, options, dprVariants]);\n}\n","references":["/Users/hnanh/Workspaces/node_modules/@types/react/index.d.ts","/Users/hnanh/Workspaces/remix-image/src/loaders/index.ts","/Users/hnanh/Workspaces/remix-image/src/types/client.ts","/Users/hnanh/Workspaces/remix-image/src/types/image.ts","/Users/hnanh/Workspaces/remix-image/src/types/transformer.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/hooks/responsiveImage.d.ts","writeByteOrderMark":false,"text":"import { ClientLoader } from \"../types/client\";\nimport type { ResponsiveSize } from \"../types/image\";\nimport type { SizelessOptions } from \"../types/transformer\";\nexport type ImageSource = {\n    src?: string;\n};\nexport type ResponsiveHookResult = {\n    src: string;\n    srcSet?: string;\n    sizes?: string;\n};\nexport declare function useResponsiveImage(image: ImageSource, responsive: ResponsiveSize[], options?: SizelessOptions, dprVariants?: number | number[], loaderUrl?: string, loader?: ClientLoader): ResponsiveHookResult;\n"}}
