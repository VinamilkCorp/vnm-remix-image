{"code":"import qs from \"query-string\";\nimport { RemixImageError } from \"../types/error\";\nexport const decodeQuery = (queryParams, key) => queryParams.has(key) ? decodeURIComponent(queryParams.get(key)) : null;\nexport const encodeQuery = (url, query) => {\n    const fixedQuery = query;\n    if (Object.prototype.hasOwnProperty.call(query, \"crop\")) {\n        fixedQuery.crop = JSON.stringify(fixedQuery.crop);\n    }\n    return qs.stringifyUrl({\n        url,\n        query: fixedQuery,\n    }, {\n        skipNull: true,\n        arrayFormat: \"bracket\",\n        sort: false,\n    });\n};\nexport const decodeTransformQuery = (queryString) => {\n    const parsed = qs.parse(queryString, {\n        arrayFormat: \"bracket\",\n        parseNumbers: true,\n        parseBooleans: true,\n        sort: false,\n    });\n    if (Object.prototype.hasOwnProperty.call(parsed, \"crop\") &&\n        parsed.crop != null) {\n        parsed.crop = JSON.parse(parsed.crop);\n    }\n    return parsed;\n};\nexport const parseURL = (rawUrl, baseUrl) => {\n    let urlObject;\n    try {\n        urlObject = new URL(rawUrl, baseUrl);\n    }\n    catch (error) {\n        throw new RemixImageError(`Invalid URL: ${rawUrl}`, 400);\n    }\n    return urlObject;\n};\n","references":["/Users/hnanh/Workspaces/remix-image/node_modules/query-string/index.d.ts","/Users/hnanh/Workspaces/remix-image/src/types/error.ts","/Users/hnanh/Workspaces/remix-image/src/types/transformer.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/utils/url.d.ts","writeByteOrderMark":false,"text":"import type { TransformOptions } from \"../types/transformer\";\nexport declare const decodeQuery: (queryParams: URLSearchParams, key: string) => string | null;\nexport declare const encodeQuery: (url: string, query: Record<string, any>) => string;\nexport declare const decodeTransformQuery: (queryString: string) => Partial<TransformOptions>;\nexport declare const parseURL: (rawUrl: string, baseUrl?: string) => URL;\n"}}
