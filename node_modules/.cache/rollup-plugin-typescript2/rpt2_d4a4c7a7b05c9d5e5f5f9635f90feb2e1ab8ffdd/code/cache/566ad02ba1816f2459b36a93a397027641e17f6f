{"code":"export {};\n","references":["/Users/hnanh/Workspaces/remix-image/src/types/cache.ts","/Users/hnanh/Workspaces/remix-image/src/types/file.ts","/Users/hnanh/Workspaces/remix-image/src/types/resolver.ts","/Users/hnanh/Workspaces/remix-image/src/types/transformer.ts"],"dts":{"name":"/Users/hnanh/Workspaces/remix-image/build/types/loader.d.ts","writeByteOrderMark":false,"text":"import type { Cache } from \"./cache\";\nimport type { MimeType } from \"./file\";\nimport type { Resolver } from \"./resolver\";\nimport type { SizelessOptions, Transformer } from \"./transformer\";\nexport interface LoaderConfig {\n    /** The URL for this Remix server. */\n    selfUrl: string;\n    /** A resolver function that handles retrieving image assets. (optional, default fetchResolver) */\n    resolver?: Resolver;\n    /** A transformer function that handles mutations of images. If this option is null, transformation will be skipped. (optional, default pureTransformer) */\n    transformer?: Transformer | null;\n    /** If RemixImage should fallback to the fallback mime type if the output type is not supported. (optional, default true) */\n    useFallbackFormat?: boolean;\n    /** The output mime type the image should fallback to if the provided output type is not supported. (optional, default MimeType.JPEG) */\n    fallbackFormat?: MimeType;\n    /** If RemixImage should fallback to the fallback transformer if custom transformer fails. (optional, default true) */\n    useFallbackTransformer?: boolean;\n    /** The transformer the loader should use if the provided custom transformer fails. (optional, default pureTransformer) */\n    fallbackTransformer?: Transformer;\n    /** A cache to store computed RemixImage transformations. (optional) */\n    cache?: Cache | null;\n    /** Default TransformOptions to use, can be overridden by the client. (optional) */\n    defaultOptions?: SizelessOptions;\n    /** Redirect image to original source if RemixImage fails. (optional, default false) */\n    redirectOnFail?: boolean;\n    /** A set of mime types that should be returned without transformation. (optional, default Set([MimeType.SVG]) */\n    skipFormats?: Set<MimeType> | null;\n    /** The base file path used for the resolver. (optional, default \"public\") */\n    basePath?: string;\n    /** An array of domains that assets can be fetched from. Set to null to disable. (optional, default null) */\n    whitelistedDomains?: string[] | null;\n    /** An array of domains that assets are not allowed to be fetched from. Only used if whitelistedDomains is not null. (optional, default null) */\n    blacklistedDomains?: string[] | null;\n    /** Enables verbose logging for debugging */\n    verbose?: boolean;\n}\nexport type AssetLoader = (config: LoaderConfig, request: Request) => Promise<Response>;\n"}}
