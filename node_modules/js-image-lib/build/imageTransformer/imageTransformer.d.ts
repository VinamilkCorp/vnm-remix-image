import { MimeType } from "../types/file";
import { FlipDirection, OutputOptions, ResizeOptions } from "../types/transformer";
/**
 * Mime types accepted as inputs by the ImageTransformer.
 */
export declare const supportedInputs: Set<MimeType>;
/**
 * Mime types the ImageTransformer allows exporting as.
 */
export declare const supportedOutputs: Set<MimeType>;
export default class ImageTransformer {
    #private;
    /**
     * Settings used during image export for some image formats.
     */
    outputOptions: OutputOptions;
    /**
     * Create a new ImageTransformer.
     * @param image The image to transform encoded as a Uint8Array.
     * @param outputOptions Settings used during image export for some image formats. (optional)
     */
    constructor(image: Uint8Array, outputOptions?: Partial<OutputOptions>);
    /**
     * Create a new ImageTransformer.
     * @param image The image to transform encoded as a Uint8Array.
     * @param contentType The predetermined mime type of the image, optional, but speeds up transformation if provided.
     * @param outputOptions Settings used during image export for some image formats. (optional)
     */
    constructor(image: Uint8Array, contentType: MimeType, outputOptions?: Partial<OutputOptions>);
    /**
     * Width of the currently transformed image.
     */
    get width(): number;
    /**
     * Height of the currently transformed image.
     */
    get height(): number;
    /**
     * Crop the image.
     * @param x The x position of the upper left pixel.
     * @param y The y position of the upper left pixel.
     * @param width The number of pixels wide to crop the image.
     * @param height The number of pixels high to crop the image.
     */
    crop(x: number, y: number, width: number, height: number): ImageTransformer;
    /**
     * Resize the image.
     * @param width Width of resulting image or null.
     * @param options Optional settings used to adjust the fit and placement of the image within its frame.
     */
    resize(width: number, options?: ResizeOptions): ImageTransformer;
    /**
     * Resize the image.
     * @param width Width of resulting image or null.
     * @param height Height of resulting image or null. If width is present, this takes priority. (optional, default null)
     * @param options Optional settings used to adjust the fit and placement of the image within its frame.
     */
    resize(width: null, height: number, options?: ResizeOptions): ImageTransformer;
    /**
     * Resize the image.
     * @param width Width of resulting image or null.
     * @param height Height of resulting image or null. If width is present, this takes priority. (optional, default null)
     * @param options Optional settings used to adjust the fit and placement of the image within its frame.
     */
    resize(width: number, height: number, options?: ResizeOptions): ImageTransformer;
    /**
     * Flip the image across its axis.
     * @param direction The direction to mirror the image by.
     */
    flip(direction: FlipDirection): ImageTransformer;
    /**
     * Rotate the image by a number of degrees clockwise.
     * @param degrees The number of degrees to rotate the image by.
     */
    rotate(degrees: number): ImageTransformer;
    /**
     * Blur the image using gaussian blur with a specified radius.
     * @param blurRadius The number of pixels to blur the image by.
     */
    blur(blurRadius: number): ImageTransformer;
    /**
     * Export the image as a Uint8Array with an optionally specified mime type.
     * @param contentType The content type of the resulting image. (optional, default source type)
     */
    toBuffer(contentType?: MimeType): Uint8Array;
}
